@page "/articles"
@using WarehouseBlazor.DTO
@using WarehouseBlazor.Services

<style>
    .form-select {
        transition: all 0.3s ease;
        border: 1px solid #dee2e6;
    }

    .form-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .compact-form .form-select {
        padding: 0.375rem 1.75rem 0.375rem 0.75rem;
        font-size: 0.875rem;
    }

    /* Nuevos estilos para el buscador */
    .search-container {
        max-width: 500px;
        margin: 1.5rem auto;
        position: relative;
    }

    .search-input {
        border-radius: 25px;
        padding-right: 40px;
    }

    .search-icon {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }
</style>

<h3 class="text-center my-4">Gestión de Artículos</h3>

@if (articles == null)

{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <div class="table-responsive rounded-3 shadow-sm">
        <table class="table table-hover table-striped mb-0">
            <thead class="table-primary">
                <tr>
                    <th>Código</th>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Cantidad</th>
                    <th>Retornable</th>
                    <th>Marca</th>
                    <th>Categoría</th>
                    <th>Estado</th>
                    <th>Unidad</th>
                    <th class="text-end">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var article in articles)
                {
                    <tr>
                        <td class="align-middle">@article.UniqueCode</td>
                        <td class="align-middle">@article.ArticleName</td>
                        <td class="align-middle">@article.Descriptions</td>
                        <td class="align-middle">@article.Stock</td>
                        <td class="align-middle">@article.IsReturnable</td>
                        <td class="align-middle">@article.Brand.BrandName</td>
                        <td class="align-middle">@article.Category.CategoryName</td>
                        <td class="align-middle">@article.Status.StatusName</td>
                        <td class="align-middle">@article.Unit.MeasurementUnitName</td>
                        <td class="text-end align-middle">
                            <div class="btn-group" role="group">
                                <button class="btn btn-outline-primary btn-sm"
                                        @onclick="() => EditArticle(article.ArticleId)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-outline-danger btn-sm"
                                        @onclick="() => DeleteArticle(article.ArticleId)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

<div class="card mt-4 shadow-sm">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">@(isEditMode ? "Editar Artículo" : "Nuevo Artículo")</h5>
    </div>

    <div class="card-body">
        <EditForm Model="currentArticle" OnValidSubmit="@(isEditMode ? UpdateArticle : AddArticle)" class="compact-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-4" />

            <div class="row g-3">
                <!-- Primera fila -->
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">Código Único</label>
                        <InputText class="form-control form-control-sm" @bind-Value="currentArticle.UniqueCode" />
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">Nombre</label>
                        <InputText class="form-control form-control-sm" @bind-Value="currentArticle.ArticleName" />
                    </div>
                </div>

                <!-- Segunda fila -->
                <div class="col-12">
                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <InputText class="form-control form-control-sm" @bind-Value="currentArticle.Descriptions" />
                    </div>
                </div>

                <!-- Tercera fila -->
                <div class="col-md-4">
                    <div class="mb-3">
                        <label class="form-label">Cantidad</label>
                        <InputNumber class="form-control form-control-sm" @bind-Value="currentArticle.Stock" />
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="mb-3">
                        <label class="form-label">Es Retornable</label>
                        <select class="form-select form-select-sm" @bind="currentArticle.IsReturnable">
                            <option value="true">Sí</option>
                            <option value="false">No</option>
                        </select>
                    </div>
                </div>

                <!-- Cuarta fila - Selects en grid responsive -->
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label">Categoría</label>
                        <select class="form-select form-select-sm" @bind="currentArticle.CategoryId">
                            <option value="">Seleccionar...</option>
                            @foreach (var item in categories)
                            {
                                <option value="@item.CategoryId">@item.CategoryName</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label">Unidad</label>
                        <select class="form-select form-select-sm" @bind="currentArticle.UnitId">
                            <option value="">Seleccionar...</option>
                            @foreach (var item in unidad)
                            {
                                <option value="@item.UnitId">@item.MeasurementUnitName</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label">Estado</label>
                        <select class="form-select form-select-sm" @bind="currentArticle.StatusId">
                            <option value="">Seleccionar...</option>
                            @foreach (var item in estados)
                            {
                                <option value="@item.StatusId">@item.StatusName</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label">Marca</label>
                        <select class="form-select form-select-sm" @bind="currentArticle.BrandId">
                            <option value="">Seleccionar...</option>
                            @foreach (var item in marcas)
                            {
                                <option value="@item.BrandId">@item.BrandName</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-end gap-2 mt-4">
                <button type="button" class="btn btn-secondary btn-sm"
                        @onclick="() => { currentArticle = new ArticleRequest(); isEditMode = false; }">
                    Cancelar
                </button>
                <button type="submit" class="btn btn-primary btn-sm">
                    @(isEditMode ? "Actualizar Artículo" : "Agregar Artículo")
                </button>
            </div>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@inject BrandService brandService
@inject CategoriesService categoriesService
@inject MeasurementUnitService measurementUnitService
@inject StatusService statusService
@inject ArticleService articleService
@code {
    private List<ArticleResponse> articles;
    private ArticleRequest currentArticle = new ArticleRequest();
    private string errorMessage;
    private string successMessage;
    private bool isEditMode = false;
    private List<BrandResponse> marcas = new();
    private List<CategoriesResponse> categories = new();
    private List<MeasurementUnitResponse> unidad = new();
    private List<StatusResponse> estados = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData();
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    private async Task LoadData()
    {
        articles = await articleService.GetArticles();
        marcas = await brandService.GetBrands();
        categories = await categoriesService.GetCategories();
        estados = await statusService.GetStatuses();
        unidad = await measurementUnitService.GetMeasurementUnits();
    }

    private void EditArticle(int articleId)
    {
        var articleToEdit = articles.FirstOrDefault(a => a.ArticleId == articleId);
        if (articleToEdit != null)
        {
            currentArticle = new ArticleRequest
                {
                    ArticleId = articleToEdit.ArticleId, // CRÍTICO: Este campo estaba faltante
                    UniqueCode = articleToEdit.UniqueCode,
                    ArticleName = articleToEdit.ArticleName,
                    Descriptions = articleToEdit.Descriptions,
                    Stock = articleToEdit.Stock,
                    IsReturnable = articleToEdit.IsReturnable,
                    CategoryId = articleToEdit.CategoryId,
                    UnitId = articleToEdit.UnitId,
                    BrandId = articleToEdit.BrandId,
                    StatusId = articleToEdit.StatusId
                };
            isEditMode = true;
            errorMessage = null;
            successMessage = null;
        }
    }

    private async Task AddArticle()
    {
        try
        {
            errorMessage = null;
            var success = await articleService.AddArticle(currentArticle);

            if (success)
            {
                successMessage = "Artículo agregado con éxito!";
                ResetForm();
                await LoadData();
            }
            else
            {
                errorMessage = "Error al agregar el artículo. Verifique los datos.";
            }
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    private async Task UpdateArticle()
    {
        try
        {
            if (currentArticle.ArticleId == 0)
            {
                errorMessage = "ID de artículo inválido!";
                return;
            }

            errorMessage = null;
            var success = await articleService.UpdateArticle(currentArticle.ArticleId, currentArticle);

            if (success)
            {
                successMessage = "Artículo actualizado con éxito!";
                ResetForm();
                await LoadData();
            }
            else
            {
                errorMessage = "Error al actualizar el artículo. Verifique los datos.";
            }
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    private async Task DeleteArticle(int articleId)
    {
        try
        {
            errorMessage = null;
            var success = await articleService.DeleteArticle(articleId);

            if (success)
            {
                successMessage = "Artículo eliminado con éxito!";
                await LoadData();
            }
            else
            {
                errorMessage = "Error al eliminar el artículo.";
            }
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    private void ResetForm()
    {
        currentArticle = new ArticleRequest();
        isEditMode = false;
        errorMessage = null;
        successMessage = null;
    }

    private void HandleError(Exception ex)
    {
        errorMessage = $"Error: {ex.Message}";
        Console.WriteLine($"Error: {ex}");
    }
}