@page "/articles"
@using WarehouseBlazor.DTO
@using WarehouseBlazor.Services

<h3 class="text-center my-4">Gestión de Artículos</h3>

@if (articles == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Codigo</th>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Cantidad</th>
                    <th>Es Retornable</th>
                    <th>Marca</th>
                    <th>Categoria</th>
                    <th>Estado</th>
                    <th>Unidad de medida</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var article in articles)
                {
                    <tr>
                        <td>@article.UniqueCode</td>
                        <td>@article.ArticleName</td>
                        <td>@article.Descriptions</td>
                        <td>@article.Stock</td>
                        <td>@article.IsReturnable</td>
                        <td>@article.Brand.BrandName</td>
                        <td>@article.Category.CategoryName</td>
                        <td>@article.Status.StatusName</td>
                        <td>@article.Unit.MeasurementUnitName</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => EditArticle(article.ArticleId)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteArticle(article.ArticleId)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<h3>@(isEditMode ? "Editar Artículo" : "Agregar Nuevo Artículo")</h3>

<EditForm Model="currentArticle" OnValidSubmit="@(isEditMode ? UpdateArticle : AddArticle)">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card p-4 my-4">
        <div class="mb-3">
            <label for="UniqueCode" class="form-label">Código Único</label>
            <InputText id="UniqueCode" class="form-control" @bind-Value="currentArticle.UniqueCode" />
        </div>
        <div class="mb-3">
            <label for="ArticleName" class="form-label">Nombre</label>
            <InputText id="ArticleName" class="form-control" @bind-Value="currentArticle.ArticleName" />
        </div>
        <div class="mb-3">
            <label for="Descriptions" class="form-label">Descripción</label>
            <InputText id="Descriptions" class="form-control" @bind-Value="currentArticle.Descriptions" />
        </div>
        <div class="mb-3">
            <label for="Stock" class="form-label">Cantidad</label>
            <InputNumber id="Stock" class="form-control" @bind-Value="currentArticle.Stock" />
        </div>
        <div class="mb-3">
            <label for="IsReturnable" class="form-label">Es Retornable</label>
            <InputText id="IsReturnable" class="form-control" @bind-Value="currentArticle.IsReturnable" />
        </div>
        <div class="mb-3">
            <label for="CategoryId" class="form-label">Categoría</label>
            <InputNumber id="CategoryId" class="form-control" @bind-Value="currentArticle.CategoryId" />
        </div>
        <div class="mb-3">
            <label for="UnitId" class="form-label">Unidad de Medida</label>
            <InputNumber id="UnitId" class="form-control" @bind-Value="currentArticle.UnitId" />
        </div>
        <div class="mb-3">
            <label for="BrandId" class="form-label">Marca</label>
           @*  <InputNumber id="BrandId" class="form-control" @bind-Value="currentArticle.BrandId" /> *@
            <select id="BrandId" @bind="currentArticle.BrandId">
                @foreach (var item in marcas)
                {
                    <option value="@item.BrandId">@item.BrandName</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label for="StatusId" class="form-label">Estado</label>
            <InputNumber id="StatusId" class="form-control" @bind-Value="currentArticle.StatusId" />
        </div>
        <button type="submit" class="btn btn-primary">@((isEditMode) ? "Actualizar" : "Agregar")</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@inject BrandService brandService
@inject ArticleService articleService
@code {
    private List<ArticleResponse> articles;
    private ArticleRequest currentArticle = new ArticleRequest();
    private string errorMessage;
    private string successMessage;
    private bool isEditMode = false;
    List<BrandResponse> marcas = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            articles = await articleService.GetArticles();

            marcas = await brandService.GetBrands();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void EditArticle(int articleId)
    {
        var articleToEdit = articles.FirstOrDefault(a => a.ArticleId == articleId);
        if (articleToEdit != null)
        {
            currentArticle = new ArticleRequest
                {
                    UniqueCode = articleToEdit.UniqueCode,
                    ArticleName = articleToEdit.ArticleName,
                    Descriptions = articleToEdit.Descriptions,
                    Stock = articleToEdit.Stock,
                    IsReturnable = articleToEdit.IsReturnable,
                    CategoryId = articleToEdit.CategoryId,
                    UnitId = articleToEdit.UnitId,
                    BrandId = articleToEdit.BrandId,
                    StatusId = articleToEdit.StatusId
                };
            isEditMode = true;
        }
    }

    private async Task AddArticle()
    {
        try
        {
            var success = await articleService.AddArticle(currentArticle);
            if (success)
            {
                successMessage = "Artículo agregado con éxito.";
                currentArticle = new ArticleRequest(); // Limpiar el formulario
                articles = await articleService.GetArticles(); // Refrescar lista
            }
            else
            {
                errorMessage = "Hubo un error al agregar el artículo.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task UpdateArticle()
    {
        try
        {
            var success = await articleService.UpdateArticle(currentArticle.ArticleId, currentArticle);
            if (success)
            {
                successMessage = "Artículo actualizado con éxito.";
                currentArticle = new ArticleRequest(); // Limpiar el formulario
                articles = await articleService.GetArticles(); // Refrescar lista
                isEditMode = false;
            }
            else
            {
                errorMessage = "Hubo un error al actualizar el artículo.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DeleteArticle(int articleId)
    {
        try
        {
            var success = await articleService.DeleteArticle(articleId);
            if (success)
            {
                successMessage = "Artículo eliminado con éxito.";
                articles = await articleService.GetArticles(); // Refrescar lista
            }
            else
            {
                errorMessage = "Hubo un error al eliminar el artículo.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
